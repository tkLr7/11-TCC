
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MeuParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MeuParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MeuParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MeuParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\006\004\000\002\006\005\000\002" +
    "\004\004\000\002\004\005\000\002\007\003\000\002\007" +
    "\005\000\002\010\005\000\002\005\003\000\002\005\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\004\006\006\010\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\037\001\002\000\006\005\026" +
    "\012\027\001\002\000\004\002\000\001\002\000\022\004" +
    "\006\006\010\007\020\012\014\013\015\014\012\015\017" +
    "\016\013\001\002\000\010\005\ufffe\007\ufffe\011\ufffe\001" +
    "\002\000\010\005\ufffa\007\ufffa\011\ufffa\001\002\000\010" +
    "\005\ufff8\007\ufff8\011\ufff8\001\002\000\010\005\ufffc\007" +
    "\ufffc\011\ufffc\001\002\000\010\005\ufffb\007\ufffb\011\ufffb" +
    "\001\002\000\006\007\024\011\023\001\002\000\010\005" +
    "\ufff9\007\ufff9\011\ufff9\001\002\000\012\002\ufff5\005\ufff5" +
    "\007\ufff5\011\ufff5\001\002\000\010\005\ufffd\007\ufffd\011" +
    "\ufffd\001\002\000\006\007\ufff0\011\ufff0\001\002\000\020" +
    "\004\006\006\010\012\014\013\015\014\012\015\017\016" +
    "\013\001\002\000\012\002\ufff4\005\ufff4\007\ufff4\011\ufff4" +
    "\001\002\000\006\007\uffef\011\uffef\001\002\000\012\002" +
    "\ufff7\005\ufff7\007\ufff7\011\ufff7\001\002\000\004\010\035" +
    "\001\002\000\006\005\032\011\033\001\002\000\006\005" +
    "\ufff3\011\ufff3\001\002\000\012\002\ufff6\005\ufff6\007\ufff6" +
    "\011\ufff6\001\002\000\004\012\027\001\002\000\006\005" +
    "\ufff2\011\ufff2\001\002\000\020\004\006\006\010\012\014" +
    "\013\015\014\012\015\017\016\013\001\002\000\006\005" +
    "\ufff1\011\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\010\002\004\004\003\006\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\027\010\030" +
    "\001\001\000\002\001\001\000\012\003\021\004\020\005" +
    "\015\006\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\024\004\020\006" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\033\001\001\000\002" +
    "\001\001\000\010\003\035\004\020\006\010\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MeuParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MeuParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MeuParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MeuParser$actions {
  private final MeuParser parser;

  /** Constructor */
  CUP$MeuParser$actions(MeuParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MeuParser$do_action_part00000000(
    int                        CUP$MeuParser$act_num,
    java_cup.runtime.lr_parser CUP$MeuParser$parser,
    java.util.Stack            CUP$MeuParser$stack,
    int                        CUP$MeuParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MeuParser$result;

      /* select the action based on the action number */
      switch (CUP$MeuParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= json_documento EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).value;
		RESULT = start_val;
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MeuParser$parser.done_parsing();
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // json_documento ::= jsoninfo 
            {
              Object RESULT =null;
		 System.out.println("Documento JSON com objeto raiz válido."); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json_documento",0, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // json_documento ::= jsonarray 
            {
              Object RESULT =null;
		 System.out.println("Documento JSON com array raiz válido."); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json_documento",0, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // json ::= jsoninfo 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // json ::= jsonarray 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // json ::= STRING 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // json ::= NUMERO 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // json ::= TRUE 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // json ::= FALSE 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // json ::= NULL 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("json",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jsoninfo ::= ACHAVE FCHAVE 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsoninfo",4, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // jsoninfo ::= ACHAVE jsoncomponente FCHAVE 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsoninfo",4, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // jsonarray ::= ACOLCHETE FCOLCHETE 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsonarray",2, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // jsonarray ::= ACOLCHETE jsonelementos FCOLCHETE 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsonarray",2, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // jsoncomponente ::= jsonteste 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsoncomponente",5, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // jsoncomponente ::= jsoncomponente VIRG jsonteste 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsoncomponente",5, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // jsonteste ::= STRING DPONTOS json 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsonteste",6, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // jsonelementos ::= json 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsonelementos",3, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // jsonelementos ::= jsonelementos VIRG json 
            {
              Object RESULT =null;

              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("jsonelementos",3, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MeuParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MeuParser$do_action(
    int                        CUP$MeuParser$act_num,
    java_cup.runtime.lr_parser CUP$MeuParser$parser,
    java.util.Stack            CUP$MeuParser$stack,
    int                        CUP$MeuParser$top)
    throws java.lang.Exception
    {
              return CUP$MeuParser$do_action_part00000000(
                               CUP$MeuParser$act_num,
                               CUP$MeuParser$parser,
                               CUP$MeuParser$stack,
                               CUP$MeuParser$top);
    }
}

}
